[
  {
    "Id": "0",
    "Name": "CustomQueryInterface Sample - IMarshal on WCF",
    "DevelopmentStatus": "Alpha",
    "Description": "CustomQueryInterface enables users to customize the default implementation of “standard” COM interfaces provided by CLR. We already released a [url:sample|http://clrinterop.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=32350] to demo customized IDispatch as well as aggregation between two managed objects.\n\nTo further demo the power of CustomQueryInterface and the ability to use the .Net technology (WCF) within COM world, this sample targets the customization of IMarshal interface by using WCF.\n\n[url:IMarshal|http://msdn.microsoft.com/en-us/library/dd542707(VS.85).aspx] enables a COM object to define and manage the marshaling of its interface pointers. On the other hand, WCF provides serialization facilities that enable loose coupling, which significantly eases the customization of IMarshal and makes it more flexible.\n\nIn this sample, we provide three important things:\n* A managed class acts as the COM component which also implements a WCF service.\n* A managed class acts as the COM proxy which contains the WCF client.\n* A program that demos the usage of the two classes above by passing the IUnknown pointer through the global stream.\n\nPlease note that you need to open the solution as the administrator on Vista or Windows 7.\n",
    "ReleasedDatge": "0001-01-01T00:00:00",
    "ModifiedDate": "2009-11-12T23:39:43.98-08:00",
    "Files": [
      {
        "Id": "d36807c9-bfa2-465d-ad9b-7af7dbe9cdce",
        "FileName": "CustomIMarshal.zip",
        "Url": "./0/d36807c9-bfa2-465d-ad9b-7af7dbe9cdce",
        "Type": "Application",
        "UploadDate": "2009-11-10T19:33:49.65-08:00"
      }
    ]
  },
  {
    "Id": "1",
    "Name": "CustomQueryInterface - IDispatch and Aggregation",
    "DevelopmentStatus": "Beta",
    "Description": "In the CLR v4 there is a new interface called *ICustomQueryInterface*. This very cool new feature will enable developers to provide their own managed implementation of custom and standard COM interfaces (except *IUnknown*). One interesting scenario, which will be illustrated in the sample below, is dynamic managed aggregation with a flexible implementation of *IDispatch*. \n\nIn this sample, we will show an implementation of *ICustomQueryInterface*  through\n* a managed *IDispatch* implementation that overrides the default *IDispatch* implementation by the CLR\n* a managed COM aggregation system where both Outer and Inner objects are managed objects\n\n*Note:* This a VS2010 Beta2 solution. Please make sure you install VS2010 Beta2 or later before you open the sample. Use with VS2010 Beta1 or earlier is not supported.\n[url:Dev10 Beta2 download]",
    "ReleasedDatge": "0001-01-01T00:00:00",
    "ModifiedDate": "2009-09-10T22:04:17.44-07:00",
    "Files": [
      {
        "Id": "6bf982fd-aca9-4255-ad25-e718bd1f867e",
        "FileName": "CustomQueryInterfaceSample.zip",
        "Url": "./1/6bf982fd-aca9-4255-ad25-e718bd1f867e",
        "Type": "Example",
        "UploadDate": "2009-09-08T22:55:46.57-07:00"
      }
    ]
  },
  {
    "Id": "2",
    "Name": "IL Stub Diagnostics Tool",
    "DevelopmentStatus": "Beta",
    "Description": "Intermediate Language(IL) Stubs is not a brand new feature of the CLR. With the release of .NET v4, however, IL stubs for x86 and x64 will be consistent. Moreover, event tracing on Windows (ETW) will be enabled to aide developers in diagnosing issues with IL stubs.\n\nIL stubs are generated on the fly by the CLR and handle the marshalling and invocation of the target method. Since the stubs are dynamically generated, it is generally difficult for users to investigate or troubleshoot issues in the generated code---especially when it is necessary to determine if the appropriate managed/native signatures are being invoked!\n\nThe *IL Stub Diagnostic* tool was created to ease the interop debugging experience. It is a real-time monitor which shows the details of every IL stub generated by the CLR in a given process. For each stub, the tool currently displays its IL code as well as the signature of the managed/native methods. It also provides a filter for searching on the desired stub(s) and allows the user to navigate between blocks in a stub.\n\nThis release is supported on Windows Vista+. Further, we plan on releasing enhancements of the tool during the Visual Studio 2010 Beta period. Stay tuned!!\n\nThis release include the following contents:\n* *IL Stub Diagnostic* binary and sources\n* *Tutorial* to demo the use of the IL Stub Diagnostic tool\n* *Sample* PInvoke program and sources used in tutorial\n\nWe've also post two blogs about IL Stub:\n* [url:IL Stub Diagnostic Tool|http://blogs.msdn.com/clrteam/archive/2009/08/26/il-stub-diagnostic-tool.aspx]\n* [url:Improvements to Interop Marshaling in V4: IL Stubs Everywhere|http://blogs.msdn.com/clrteam/archive/2009/08/10/improvements-to-interop-marshaling-in-v4-il-stubs-everywhere.aspx]",
    "ReleasedDatge": "0001-01-01T00:00:00",
    "ModifiedDate": "2009-09-03T22:42:22.25-07:00",
    "Files": [
      {
        "Id": "e7bd3f6a-ed9f-4e98-8cec-4a4f40e6a587",
        "FileName": "ILStubDiagnosticsBinaries.zip",
        "Url": "./2/e7bd3f6a-ed9f-4e98-8cec-4a4f40e6a587",
        "Type": "Application",
        "UploadDate": "2009-09-03T22:41:12.4-07:00"
      },
      {
        "Id": "aaf5a156-bdc3-4748-b94f-4500a6b9c6f7",
        "FileName": "ILStubDiagnosticsSrc.zip",
        "Url": "./2/aaf5a156-bdc3-4748-b94f-4500a6b9c6f7",
        "Type": "Source Code",
        "UploadDate": "2009-09-03T22:41:12.463-07:00"
      }
    ]
  },
  {
    "Id": "3",
    "Name": "PInvoke Interop Assistant",
    "DevelopmentStatus": "None",
    "Description": "In marshalling, there are a bunch of attributes and rules. Understanding all those attributes and rules seem a bit daunting. In order to make developing work more efficient and easier on those attributes and the rules, P/Invoke Interop Assistant comes out. It is a toolkit that helps developers to efficiently convert from C to managed P/Invoke signatures or verse visa. This is conceptually similar to TlbImp for COM Interop which generates managed proxy entry points based on some formal description of the unmanaged side but it works for P/Invoke. The toolkit was first released on [url:MSDN Magazine website|http://msdn.microsoft.com/en-us/magazine/cc164193.aspx] in Jan, 2008. \n\nThe toolkit contains the following things:\n* A command-line tool for managed-to-unmanaged signature conversion\n* A command-line tool for unmanaged-to-managed signature conversion\n* A GUI tool combining all the conversion functionality\n* An XML database file containing Windows API signature data (referenced from VS2005 SDK)\n* A help manual\nTo use the tool, you either feed in an MSIL assemblies and get out C source for the proper unmanaged signatures or feed in C source with the unmanaged signature and get out proper VB/C#. The command-line tools allows batch processing for multiple files.\n\nMore information about the P/Invoke Interop Assistant can be found in the help mannual attached with the release package.\n",
    "ReleasedDatge": "0001-01-01T00:00:00",
    "ModifiedDate": "2008-09-22T23:55:01.737-07:00",
    "Files": [
      {
        "Id": "37565661-4fce-4be9-905a-4757cf44a845",
        "FileName": "InteropSignatureToolkitSetup.zip",
        "Url": "./3/37565661-4fce-4be9-905a-4757cf44a845",
        "Type": "Application",
        "UploadDate": "2008-06-11T12:25:14.137-07:00"
      },
      {
        "Id": "b357f7d9-4bb2-4ebf-9f27-7bfed7457b24",
        "FileName": "PInvokeSignatureGeneratorSource.zip",
        "Url": "./3/b357f7d9-4bb2-4ebf-9f27-7bfed7457b24",
        "Type": "Source Code",
        "UploadDate": "2008-06-11T12:22:05.873-07:00"
      }
    ]
  },
  {
    "Id": "4",
    "Name": "Type Library Importer in Managed Code",
    "DevelopmentStatus": "Stable",
    "Description": "TLBIMP is a .NET SDK tool that creates an Interop assembly from a COM type library. This project is a managed code implementation of TLBIMP. We have released this tool so developers can see what TLBIMP does and if necessary extend the tool for their specific requirements, while this is the third Tlbimp release on CodePlex. \n\nA big feature is added to this release: Tlbimp output customization. With this feature, some special needs of importing convention can be handled when a type library is being imported by creating a configuration file in xml format, instead of leaving it later by disassembling an interop assembly to update the code. The current version supports the following configuration action:\n\n* *ChangeManagedName*: To provide a tlb type with a customized managed name instead of the default one.\n* *ResolveTo*: To resolve a tlb type to a user-specified managed type.\n* *AddAttribute*: To add some customized attribute to the corresponding managed types of the tlb types.\n* *PreserveSig*: To apply PreserveSig attribute to a managed function instead of {\"[out, retval]\"} parameters.\n* *ConvertTo*: To convert a tlb function parameter to the user-specified managed signature.\nThe new Tlbimp in the package accept the following command-line syntax to integrate the customized rule into its importing process:\n\n> tlbimp ATlb.tlb /config:AXMLConfigFile.xml\n\nA UI tool, *TlbimpRuleFileEditor*, can be found in the package for customization purpose, which help to create a configuration file without requiring knowledge of xml configuration file syntax. More introduction can be found in the document attached with the project.\n\nThe package also includes some tests, which can be used with *Tlbimp Regression Test Tool* (attached in the package as well) to validate any updates made against the original source code. More information about this tool can be found in the document in the package.\n\nOther features introduced in the previous releases, are two command-line switches as the follows:\n\n* */v2*: When this switch is on, the Tlbimp applies new rules when importing native types so as to get the output more as expected result. The new rule in this release is to convert _{\"VARIANT_BOOL\"}_ in structures to _bool_ instead of _short_.\n* */PreserveSig*: If this swtich is applied, the Tlbimp doesn't apply {\"[out, retval]\"} parameter transformation but adds _PreserveSigAttribute_ to the imported method.\nTo get the help for the command-line tool, please type in \"tlbimp /?\" in the command line, or check MSDN document library for the features in .NET 3.5 SDK.\n\n*Update*: Ported some bug fixes from Tlbimp in .NET framework v4.0",
    "ReleasedDatge": "0001-01-01T00:00:00",
    "ModifiedDate": "2009-12-07T22:24:38.09-08:00",
    "Files": [
      {
        "Id": "c34fbc4f-44f4-4bb6-a210-2462401371d5",
        "FileName": "TlbImp2.zip",
        "Url": "./4/c34fbc4f-44f4-4bb6-a210-2462401371d5",
        "Type": "Application",
        "UploadDate": "2009-12-07T22:24:37.7-08:00"
      },
      {
        "Id": "d688bea4-79d0-479e-a554-b442f7d4c5f2",
        "FileName": "TlbImp2_Sources.zip",
        "Url": "./4/d688bea4-79d0-479e-a554-b442f7d4c5f2",
        "Type": "Source Code",
        "UploadDate": "2009-12-07T22:24:36.81-08:00"
      },
      {
        "Id": "7d2ccfc0-f048-4387-8a88-09c7fd046656",
        "FileName": "TlbImp2RegressionTestTool.zip",
        "Url": "./4/7d2ccfc0-f048-4387-8a88-09c7fd046656",
        "Type": "Application",
        "UploadDate": "2009-03-12T22:56:39.38-07:00"
      }
    ]
  }
]